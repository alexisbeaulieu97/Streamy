name: ci

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Verify go.mod is tidy
        run: |
          go mod tidy && git diff --exit-code go.mod go.sum || (echo "run: go mod tidy" && exit 1)

      - name: Verify formatting
        run: |
          gofmt -l . | tee /tmp/gofmt.txt && test ! -s /tmp/gofmt.txt || (echo "run: go fmt ./..." && exit 1)

      - name: Run all tests with race detector
        run: go test -race -timeout 10m ./...

      - name: Run unit tests with coverage (excluding cmd and UI/TUI)
        run: |
          # Get list of packages excluding UI/TUI packages without jq
          PACKAGES=$(go list ./internal/... ./pkg/... | grep -Ev '/internal/(tui|ui)(/|$)' | tr '\n' ' ')
          go test $PACKAGES -coverprofile=coverage.out -covermode=atomic

      - name: Enforce coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | awk 'END {print $3}' | sed 's/%//')
          echo "Coverage (excluding cmd, internal/tui, and internal/ui): ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          fi
          echo "✅ Coverage check passed: ${COVERAGE}%"

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Build binaries
        run: ./scripts/build.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/
          retention-days: 5
